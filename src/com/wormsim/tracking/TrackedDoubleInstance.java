/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wormsim.tracking;

import java.util.logging.Logger;

/**
 * The implementation of a tracked value, generated by
 *
 * @author ah810
 */
public abstract class TrackedDoubleInstance implements TrackedQuantityInstance {
	private static final Logger LOG = Logger.getLogger(TrackedDoubleInstance.class
					.getName());

	/**
	 * Should only be called by a tracked quantity.
	 *
	 * @param p_parent The TrackedQuantity parent
	 */
	@SuppressWarnings("unchecked")
	TrackedDoubleInstance(TrackedDouble p_parent) {
		assert p_parent != null;
		this.parent = p_parent;
		p_parent.register(this);
	}
	final TrackedDouble parent;

	@Override
	public abstract TrackedDoubleInstance copy();

	/**
	 * Returns the current value of this instance.
	 *
	 * @return
	 */
	public abstract double get();

	/**
	 * Returns the mean of this tracked quantity instance. Note that this is the
	 * mean of the mean of all checkpoints.
	 *
	 * Does not include the most recent data points in the calculation if they
	 * have not yet reached a checkpoint in size.
	 *
	 * @return The checkpoint mean
	 */
	public abstract double getMean();

	/**
	 * Returns the mean of all the data, including the most recent and
	 * checkpoints.
	 *
	 * @return The overall mean
	 */
	public abstract double getOverallMean();

	/**
	 * Returns the mean of the squares of all the data, including the most recent
	 * and checkpoints.
	 *
	 * @return The overall mean
	 */
	public abstract double getOverallSquareMean();

	/**
	 * Returns the variance of all the data, including the most recent and
	 * checkpoints.
	 *
	 * @return The overall variance
	 */
	public abstract double getOverallVariance();

	/**
	 * Returns the TrackedQuantity that this is a child of.
	 *
	 * @return
	 */
	@Override
	public TrackedDouble getParent() {
		return parent;
	}

	/**
	 * Returns the previous value of this instance.
	 *
	 * @return
	 */
	public abstract double getPrevious();

	/**
	 * Returns the mean of the most recently collected data that has not yet
	 * formed a checkpoint.
	 *
	 * @return The recent mean
	 */
	public abstract double getRecentMean();

	/**
	 * Returns the mean of the squares of the most recently collected data that
	 * has not yet formed a checkpoint.
	 *
	 * @return The recent mean
	 */
	public abstract double getRecentSquareMean();

	/**
	 * Returns the variance of the most recently collected data that has not yet
	 * formed a checkpoint.
	 *
	 * @return The recent variance
	 */
	public abstract double getRecentVariance();

	/**
	 * Returns the square mean of this tracked quantity instance. Note that this
	 * is the mean of the squared values of all checkpoints.
	 *
	 * Does not include the most recent data points in the calculation if they
	 * have not yet reached a checkpoint in size.
	 *
	 * @return The checkpoint mean
	 */
	public abstract double getSquareMean();

	// TODO: Note the change of variance in the thesis, its in one of the black ringbound books as Unfurling as checkpoints with one loose sheet.
	/**
	 * Returns the variance of this tracked quantity instance. Note that this is
	 * the mean of the variances of all checkpoints.
	 *
	 * Does not include the most recent data points in the calculation if they
	 * have not yet reached a checkpoint in size.
	 *
	 * @return The checkpoint variance
	 */
	public abstract double getVariance();

	@Override
	public String toCurrentValueString() {
		return Double.toString(get());
	}

}
